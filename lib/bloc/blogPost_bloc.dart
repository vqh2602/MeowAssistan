import 'package:flutter_bloc/flutter_bloc.dart';

import '../events/blogPost_event.dart';
import '../models/blogPost.dart';
import '../repository/blogPostRepository.dart';
import '../states/blogPost_state.dart';


class BlogPostBloc extends Bloc<BlogPostEvent, BlogPostState> {
  final BlogPostRepositories blogPostRepositories;
  BlogPostBloc({required this.blogPostRepositories})
      : super(BlogPostStateInitial()) {
    on<BlogPostEventRequest>(_onBlogPostRequested);
    on<BlogPostEventRefesh>(_onBlogPostRefesh);
  }

  void _onBlogPostRequested(BlogPostEventRequest event, Emitter emit) async {
    emit(BlogPostStateLoading());
    try {
      final BlogPost blogPost = await blogPostRepositories.fetchWeather();
      print("chay event 1111 : ");
      emit(BlogPostStateSuccess(blogPost: blogPost));
      print("chay event: " + blogPost.toString());
    } catch (_) {
      emit(BlogPostStateFail());
      // final WeatherMain weather = await weatherRepositories.fetchWeather(
      //     event.lat, event.long, event.lang);
      // emit(WeatherStateSuccess(autogeneratedWeather: weather));
      print("chay event lá»—i");
    }
  }

  void _onBlogPostRefesh(BlogPostEventRefesh event, Emitter emit) async {
    emit(BlogPostStateLoading());
    try {
      final BlogPost blogPost = await blogPostRepositories.fetchWeather();
      emit(BlogPostStateSuccess(blogPost: blogPost));
    } catch (_) {
      emit(BlogPostStateFail());
    }
  }
}
