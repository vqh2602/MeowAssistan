
import 'dart:io';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_datetime_picker/flutter_datetime_picker.dart';
import 'package:intl/intl.dart';
import 'package:lottie/lottie.dart';
import 'package:rflutter_alert/rflutter_alert.dart';
import 'package:sizer/sizer.dart';

import '../../Color/colors.dart';

class CatCalorieCalculator extends StatefulWidget {
  const CatCalorieCalculator({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() {
    // TODO: implement createState
    // throw UnimplementedError();
    return _MyCatCalorieCalculator();
  }
}

class _MyCatCalorieCalculator extends State<CatCalorieCalculator> {

  TextEditingController textEditingControlleNumber = TextEditingController();
  String dropdownImage = '1- m√®o tr∆∞·ªüng th√†nh - l·ªõn tu·ªïi';
  List<String> lstCatInfo = [
'1- m√®o tr∆∞·ªüng th√†nh - l·ªõn tu·ªïi',
    '2- m√®o tr∆∞·ªüng th√†nh',
    '3- gi·∫£m c√¢n',
    '4- tƒÉng c√¢n',
    '5- m√®o con 0->4 th√°ng tu·ªïi',
    '6- m√®o con 4 th√°ng -> tr∆∞·ªüng th√†nh'
  ];

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    textEditingControlleNumber.text = '0';
  }

  @override
  Widget build(BuildContext context) {
    // TODO: implement build
    return Scaffold(
      body: SafeArea(
        child: Center(
          child: Card(
            child: Container(
              padding: EdgeInsets.all(20),
              height: 35.h,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: <Widget>[
                  Align(
                      alignment: Alignment.centerRight,
                      child: Padding(
                        padding: const EdgeInsets.only(left: 20, right: 20),
                        child: InkWell(
                            onTap: () {
                              alertInfo();
                            },
                            child: Icon(
                              Icons.info_outline,
                              color: colorPinkFf758c(),
                              size: 35,
                            )),
                      )),
                  Container(
                    padding: const EdgeInsets.only(
                        left: 10, right: 10, top: 5, bottom: 5),
                    decoration: BoxDecoration(
                        color: colorPinkFf758c(),
                        borderRadius: BorderRadius.circular(50)),
                    child: const Text(
                      'C√¢n n·∫∑ng',
                      style: TextStyle(
                          fontSize: 17,
                          fontFamily: 'Inter',
                          color: Colors.white),
                    ),
                  ),
                  Container(
                    width: double.infinity,
                    decoration: const BoxDecoration(
                      border: Border(
                        bottom: BorderSide(
                          //                   <--- left side
                          color: Colors.grey,
                          width: 1.0,
                        ),
                      ),
                    ),
                    child: TextField(
                      controller: textEditingControlleNumber,
                      keyboardType: TextInputType.number,
                      autocorrect: false,
                      decoration: const InputDecoration(
                        border: UnderlineInputBorder(),
                        labelText: 'Nh·∫≠p c√¢n n·∫∑ng (kg)',
                      ),
                    ),
                  ),
                      Container(
                        margin: EdgeInsets.only(top: 10),
                        width: double.infinity,
                        child: Center(
                          child: DropdownButton<String>(
                            // isExpanded: true,
                            value: dropdownImage,
                            // icon: Icon(Icons.arrow_drop_down_outlined, color: colorPinkFf758c(),),
                            style:
                            TextStyle(color: colorPinkFf758c()),
                            underline: Container(
                              height: 0,
                              color: colorPinkFf758c(),
                            ),
                            onChanged: (newValue) {
                              setState(() {
                                dropdownImage = newValue.toString();
                              });
                            },
                            items: lstCatInfo.map((value) {
                              return DropdownMenuItem(
                                value: value,
                                child: Row(
                                  children: [
                                    Text(value)
                                  ],
                                ),
                              );
                            }).toList(),
                          ),
                        ),
                  ),
                  IconButton(
                    onPressed: () {
                      alertCatYears(
                          double.parse(textEditingControlleNumber.text), dropdownImage);
                    },
                    icon: Icon(
                      Icons.calculate_outlined,
                      color: colorPinkFf758c(),
                    ),
                    iconSize: 40,
                  )
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  double getCons(int index){
    switch(index){
      case 1: return 1.6;break;
      case 2:  return 1.8; break;
      case 3: return 1; break;
      case 4: return 1.7; break;
      case 5: return 3; break;
      case 6: return 2; break;
      default: return 0;
    }
  }

  void alertCatYears(double cannang, String cat) {
    print(getCons(int.tryParse(cat[0])!));
    double caloMin = pow(cannang, 0.75)*70;
    double caloDay = (pow(cannang, 0.75)*70)*getCons(int.tryParse(cat[0])!);

    Alert(
      context: context,
      title: 'Cat Calorie Calculator',
      image: Lottie.asset('acssets/iconAnimation/loaderCat.json'),
      content: Container(
          child: RichText(
            text: TextSpan(
              text: 'S·ªë calo c·∫ßn thi·∫øt t·ªëi thi·ªÉu: ',
              style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.black),
              children: <TextSpan>[
                TextSpan(
                    text: '${caloMin.toStringAsFixed(2)} cal',
                    style: TextStyle(
                        fontWeight: FontWeight.bold, color: colorPinkFf758c())),
                const TextSpan(
                    text: '\nT·ªïng calo c·∫ßn m·ªôt ng√†y ',
                    style: TextStyle(
                        fontWeight: FontWeight.bold, color: Colors.black)),
                TextSpan(
                    text: '${caloDay.toStringAsFixed(2)} cal',
                    style: TextStyle(
                        fontWeight: FontWeight.bold, color: colorPinkFf758c())),
                TextSpan(
                    text: '\nv·ªõi l·ª±a ch·ªçn: $cat ',
                    style: const TextStyle(
                        fontWeight: FontWeight.bold, color: Colors.black)),
                // TextSpan(text: getDays(dateTime, false), style: TextStyle(fontWeight: FontWeight.bold, color: colorPinkFf758c())),
              ],
            ),
          )),
      buttons: [
        DialogButton(
          child: const Text(
            "Ok",
            style: TextStyle(color: Colors.white, fontSize: 20),
          ),
          onPressed: () => Navigator.pop(context),
          color: const Color.fromRGBO(0, 179, 134, 1.0),
        ),
      ],
    ).show();
  }

  void alertInfo() {
    Alert(
      context: context,
      title: 'Th√¥ng tin',
      image: Lottie.asset('acssets/iconAnimation/search.json'),
      content: Container(
          child: Column(
            children: const [
              Text(
                'Nhu c·∫ßu calo cho m√®o - th·ª©c ƒÉn cho m√®o c√≥ h√†m l∆∞·ª£ng calo cao',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text(
                'Th·ª©c ƒÉn cho m√®o üêà c√≥ h√†m l∆∞·ª£ng calo cao bao g·ªìm c√°c ch·∫•t dinh d∆∞·ª°ng c√¢n b·∫±ng t·ªët, v·ªõi protein l√† th√†nh ph·∫ßn ch√≠nh. Ngo√†i ra, n√≥ kh√¥ng c√≥ h∆∞∆°ng v·ªã nh√¢n t·∫°o v√† ch·∫•t b·∫£o qu·∫£n. Ch√∫ng ta ƒë·ªÅu bi·∫øt m√®o c·ªßa ch√∫ng ta c√≥ th·ªÉ k√©n ch·ªçn nh∆∞ th·∫ø n√†o v·ªÅ h∆∞∆°ng v·ªã, m√πi v√† k·∫øt c·∫•u th·ª©c ƒÉn c·ªßa ch√∫ng. V√† n·∫øu con m√®o v√¨ m·ªôt l√Ω do n√†o ƒë√≥ kh√¥ng c·∫£m th·∫•y nh∆∞ b·∫£n th√¢n th√¥ng th∆∞·ªùng c·ªßa n√≥, th√¨ nh·ªØng gi√°c quan n√†y th·∫≠m ch√≠ c√≤n ƒë∆∞·ª£c n√¢ng cao h∆°n n·ªØa.'
                    '\nC√≥ m·ªôt s·ªë l√Ω do t·∫°i sao m·ªôt con m√®o ho·∫∑c m√®o con c√≥ th·ªÉ b·ªã suy dinh d∆∞·ª°ng, v√† b·∫°n c√≥ th·ªÉ c·∫ßn s·ª± tr·ª£ gi√∫p c·ªßa th·ª©c ƒÉn cho m√®o c√≥ h√†m l∆∞·ª£ng calo cao.'
                    '\nSau ƒë√¢y l√† danh s√°ch c√°c l√Ω do v√† ho√†n c·∫£nh khi con m√®o c·ªßa b·∫°n c√≥ th·ªÉ y√™u c·∫ßu th·ª©c ƒÉn cho m√®o c√≥ h√†m l∆∞·ª£ng calo cao:'
                    '\n - M·ªôt con m√®o ho·∫∑c m√®o con ƒë∆∞·ª£c gi·∫£i c·ª©u b·ªã suy dinh d∆∞·ª°ng nghi√™m tr·ªçng;'
                    '\n - M·ªôt con m√®o y·∫øu ƒëu·ªëi ho·∫∑c gi√† y·∫øu;'
                    '\n - M·ªôt con m√®o ƒë√£ gi·∫£m c√¢n do b·ªánh t·∫≠t;'
                    '\n - M·ªôt con m√®o ƒë√£ tr·∫£i qua ph·∫´u thu·∫≠t v√† hi·ªán ƒëang trong giai ƒëo·∫°n ph·ª•c h·ªìi'
                    '\n - M·ªôt con m√®o l√† m·ªôt ng∆∞·ªùi k√©n ƒÉn suy dinh d∆∞·ª°ng'
                    '\n - M·ªôt con m√®o c√≥ th·ªÉ ƒë√£ kh√¥ng ƒÉn trong v√†i ng√†y v√¨ nhi·ªÅu l√Ω do kh√°c nhau nh∆∞ b·ªã m·∫•t, di d·ªùi ho·∫∑c s·ªëng s√≥t sau th·∫£m h·ªça thi√™n nhi√™n'
                    '\n - M·ªôt con m√®o ƒëang b·ªã cƒÉng th·∫≥ng v√† lo l·∫Øng'
                    '\n -M·ªôt con m√®o ƒëang h·ªìi ph·ª•c sau khi ƒëi·ªÅu tr·ªã nha khoa',
                style: TextStyle(fontWeight: FontWeight.normal, fontSize: 15),
              ),
              Text(
                'B√©o ph√¨ ·ªü m√®o',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text(
                'Duy tr√¨ c√¢n n·∫∑ng kh·ªèe m·∫°nh c≈©ng quan tr·ªçng kh√¥ng k√©m ƒë·ªëi v·ªõi t·∫•t c·∫£ c√°c ƒë·ªông v·∫≠t c√≥ v√∫. M·∫∑c d√π ch√∫ng ta y√™u m√®o c·ªßa ch√∫ng ta l√¥ng t∆° nh∆∞ ch√∫ng c√≥ th·ªÉ, b√©o ph√¨ ·ªü m√®o c√≥ th·ªÉ l√† m·ªôt v·∫•n ƒë·ªÅ nghi√™m tr·ªçng.'
                    '\nTrong tr∆∞·ªùng h·ª£p nh∆∞ v·∫≠y, b·∫°n c√≥ th·ªÉ tham kh·∫£o t√πy ch·ªçn m√°y t√≠nh gi·∫£m c√¢n m√®o (c√≥ s·∫µn t·ª´ danh s√°ch th·∫£ xu·ªëng c·ªßa m√°y t√≠nh n√†y), ƒë√≥ l√† l√Ω t∆∞·ªüng cho c√°c b·∫≠c cha m·∫π ƒëang t√¨m ki·∫øm m·ªôt c√°ch t·ªët ƒë·ªÉ t√≠nh to√°n gi·∫£m c√¢n ·ªü m√®o.'
                    '\nV√¨ v·∫≠y, c√°c gi·∫£i ph√°p t·ªëi ∆∞u s·∫Ω l√†:'
                    '\n - Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© th√∫ y c·ªßa b·∫°n'
                    '\n - C·∫Øt gi·∫£m th·ª©c ƒÉn cho m√®o c√≥ h√†m l∆∞·ª£ng calo cao'
                    '\n - S·ª≠ d·ª•ng m√°y t√≠nh gi·∫£m c√¢n m√®o n√†y',
                style: TextStyle(fontWeight: FontWeight.normal, fontSize: 15),
              )
            ],
          )),
      buttons: [
        DialogButton(
          child: const Text(
            "Ok",
            style: TextStyle(color: Colors.white, fontSize: 20),
          ),
          onPressed: () => Navigator.pop(context),
          color: const Color.fromRGBO(0, 179, 134, 1.0),
        ),
      ],
    ).show();
  }
}
